version: v1

workflows:
  release-train:
    inputs:
      version:
        type: string
        required: true
        description: "Version to release across all components"
    steps:
      - id: start-release-train
        name: "Start release train orchestration"
        run: |
          echo "=== Starting Release Train v{{ .Inputs.version }} ==="
          echo "Timestamp: $(date)"
          echo "Target version: {{ .Inputs.version }}"
          echo "Orchestrator: Coordinating full dependency graph release"
          
      - id: release-core-lib
        name: "Release core library"
        run: |
          echo "=== Phase 1: Releasing Core Library ==="
          echo "Triggering core-lib release with version {{ .Inputs.version }}"
          
          # Determine if we're in local mode or repository mode
          if [ -n "$TAKO_CURRENT_REPO" ]; then
            # We're in repository mode - use --repo flag
            echo "Running in repository mode"
            ${TAKO_BINARY:-tako} exec release --repo "${REPO_OWNER:-tako-test}/java-bom-fanout-java-bom-fanout-core-lib" --inputs.version="{{ .Inputs.version }}" --cache-dir "$CACHE_DIR"
          else
            # We're in local mode - navigate to directory
            echo "Running in local mode"
            # Try to find core-lib in various locations (work dir or cache)
            if [ -d "../java-bom-fanout-core-lib" ]; then
              cd ../java-bom-fanout-core-lib
            elif [ -d "../../repos/*/java-bom-fanout-java-bom-fanout-core-lib/main" ]; then
              cd ../../repos/*/java-bom-fanout-java-bom-fanout-core-lib/main
            else
              # Try the work directory path (need to go up to the test base directory)
              TEST_BASE_DIR=$(dirname $(dirname $(dirname $(dirname $(dirname $(pwd))))))
              if [ -d "$TEST_BASE_DIR/work/java-bom-fanout-java-bom-fanout-core-lib" ]; then
                cd "$TEST_BASE_DIR/work/java-bom-fanout-java-bom-fanout-core-lib"
              else
                echo "Error: Could not find core-lib repository"
                echo "Tried: $TEST_BASE_DIR/work/java-bom-fanout-java-bom-fanout-core-lib"
                echo "Current dir: $(pwd)"
                exit 1
              fi
            fi
            
            # Execute the release workflow
            export PATH="./mock-tools:$PATH"
            ${TAKO_BINARY:-tako} exec release --inputs.version="{{ .Inputs.version }}" --cache-dir "$CACHE_DIR"
          fi
          
          echo "Core-lib release triggered successfully"
          
      - id: trigger-downstream-updates
        name: "Trigger downstream dependency updates"
        run: |
          echo "=== Phase 2: Triggering Downstream Updates ==="
          echo "Core-lib {{ .Inputs.version }} released, now triggering dependency updates in lib-a and lib-b"
          
          if [ -n "$TAKO_CURRENT_REPO" ]; then
            # Repository mode - use --repo flags
            echo "Running in repository mode"
            echo "TAKO_CURRENT_REPO: $TAKO_CURRENT_REPO"
            echo "REPO_OWNER: ${REPO_OWNER:-tako-test}"
            echo "CACHE_DIR: $CACHE_DIR"
            
            echo "Triggering lib-a dependency update..."
            echo "Command: ${TAKO_BINARY:-tako} exec propose-and-release-update --repo \"${REPO_OWNER:-tako-test}/java-bom-fanout-java-bom-fanout-lib-a\" --inputs.core_version=\"{{ .Inputs.version }}\" --cache-dir \"$CACHE_DIR\""
            ${TAKO_BINARY:-tako} exec propose-and-release-update --repo "${REPO_OWNER:-tako-test}/java-bom-fanout-java-bom-fanout-lib-a" --inputs.core_version="{{ .Inputs.version }}" --cache-dir "$CACHE_DIR" &
            LIB_A_PID=$!
            echo "Started lib-a update with PID: $LIB_A_PID"
            
            echo "Triggering lib-b dependency update..."
            echo "Command: ${TAKO_BINARY:-tako} exec propose-and-release-update --repo \"${REPO_OWNER:-tako-test}/java-bom-fanout-java-bom-fanout-lib-b\" --inputs.core_version=\"{{ .Inputs.version }}\" --cache-dir \"$CACHE_DIR\""
            ${TAKO_BINARY:-tako} exec propose-and-release-update --repo "${REPO_OWNER:-tako-test}/java-bom-fanout-java-bom-fanout-lib-b" --inputs.core_version="{{ .Inputs.version }}" --cache-dir "$CACHE_DIR" &
            LIB_B_PID=$!
            echo "Started lib-b update with PID: $LIB_B_PID"
          else
            # Local mode - navigate to directories
            echo "Running in local mode"
            # Trigger dependency updates in parallel
            ORCHESTRATOR_DIR=$(pwd)
            
            echo "Triggering lib-a dependency update..."
            # Find lib-a repository
            if [ -d "../../repos/*/java-bom-fanout-java-bom-fanout-lib-a/main" ]; then
              cd ../../repos/*/java-bom-fanout-java-bom-fanout-lib-a/main
            elif [ -d "../java-bom-fanout-lib-a" ]; then
              cd ../java-bom-fanout-lib-a
            else
              # lib-a is in the cache
              cd ../../java-bom-fanout-java-bom-fanout-lib-a/main
            fi
            export PATH="./mock-tools:$PATH"
            ${TAKO_BINARY:-tako} exec propose-and-release-update --inputs.core_version="{{ .Inputs.version }}" --cache-dir "$CACHE_DIR" &
            LIB_A_PID=$!
            
            echo "Triggering lib-b dependency update..."
            # Find lib-b repository
            cd "$ORCHESTRATOR_DIR"
            if [ -d "../../repos/*/java-bom-fanout-java-bom-fanout-lib-b/main" ]; then
              cd ../../repos/*/java-bom-fanout-java-bom-fanout-lib-b/main
            elif [ -d "../java-bom-fanout-lib-b" ]; then
              cd ../java-bom-fanout-lib-b
            else
              # lib-b is in the cache
              cd ../../java-bom-fanout-java-bom-fanout-lib-b/main
            fi
            export PATH="./mock-tools:$PATH"
            ${TAKO_BINARY:-tako} exec propose-and-release-update --inputs.core_version="{{ .Inputs.version }}" --cache-dir "$CACHE_DIR" &
            LIB_B_PID=$!
            
            # Return to orchestrator directory
            cd "$ORCHESTRATOR_DIR"
          fi
          
          echo "Waiting for lib-a and lib-b dependency updates to complete..."
          
          # Wait for both processes to complete
          echo "Waiting for lib-a (PID: $LIB_A_PID)..."
          if wait $LIB_A_PID; then
            echo "✓ lib-a dependency update completed successfully"
          else
            LIB_A_EXIT_CODE=$?
            echo "✗ lib-a dependency update failed with exit code: $LIB_A_EXIT_CODE"
            echo "Checking if lib-b is still running..."
            kill $LIB_B_PID 2>/dev/null || true
            wait $LIB_B_PID 2>/dev/null || true
            exit 1
          fi
          
          echo "Waiting for lib-b (PID: $LIB_B_PID)..."
          if wait $LIB_B_PID; then
            echo "✓ lib-b dependency update completed successfully"
          else
            LIB_B_EXIT_CODE=$?
            echo "✗ lib-b dependency update failed with exit code: $LIB_B_EXIT_CODE"
            exit 1
          fi
          
          echo "✓ All downstream dependency updates completed"
          
      - id: wait-for-bom-update
        name: "Wait for BOM aggregation update"
        run: |
          echo "=== Phase 3: Waiting for BOM Update ==="
          echo "Now that lib-a and lib-b are updated, java-bom should react to library_released events..."
          
          # The java-bom repository subscribes to library_released events from lib-a and lib-b
          # Once both libraries have published their events, java-bom will create and merge a PR
          
          echo "Waiting for java-bom to aggregate both library releases..."
          
          # Wait for java-bom update to complete
          MAX_WAIT=60
          WAIT_TIME=0
          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            # Check various possible locations for the version file
            VERSION_FILE_FOUND=false
            for location in "../../repos/*/java-bom-fanout-java-bom-fanout-java-bom/main/java-bom-version.txt" \
                           "../java-bom-fanout-java-bom/java-bom-version.txt" \
                           "../../java-bom-fanout-java-bom-fanout-java-bom/main/java-bom-version.txt"; do
              if ls $location 2>/dev/null; then
                echo "✓ Found java-bom version file at: $location"
                VERSION_FILE_FOUND=true
                break
              fi
            done
            
            if [ "$VERSION_FILE_FOUND" = "true" ]; then
              echo "✓ Java-BOM has been updated and released"
              break
            fi
            
            echo "Still waiting for java-bom aggregation... ($WAIT_TIME/$MAX_WAIT seconds)"
            
            # Debug: Show what files exist
            if [ $((WAIT_TIME % 20)) -eq 0 ]; then
              echo "Debug: Current directory: $(pwd)"
              echo "Debug: Files in parent directories:"
              find ../.. -name "*version.txt" -o -name "tako.state.json" 2>/dev/null | head -10
            fi
            
            sleep 5
            WAIT_TIME=$((WAIT_TIME + 5))
          done
          
          if [ $WAIT_TIME -ge $MAX_WAIT ]; then
            echo "✗ Timeout waiting for java-bom update"
            echo "Check if lib-a and lib-b have emitted library_released events"
            exit 1
          fi
          
      - id: verify-release-train
        name: "Verify complete release train success"
        run: |
          echo "=== Phase 4: Verification ==="
          echo "Verifying all components completed successfully..."
          
          # Read actual versions from version files
          CORE_VERSION="{{ .Inputs.version }}"
          
          # Check version files exist
          VERSION_FILES_FOUND=true
          for repo in core-lib lib-a lib-b java-bom; do
            VERSION_FILE="../java-bom-fanout-${repo}/${repo}-version.txt"
            CACHE_VERSION_FILE="../../repos/*/java-bom-fanout-java-bom-fanout-${repo}/main/${repo}-version.txt"
            WORK_VERSION_FILE=$(dirname $(dirname $(pwd)))/work/java-bom-fanout-java-bom-fanout-${repo}/${repo}-version.txt
            
            if [ -f "$VERSION_FILE" ]; then
              echo "✓ Found $repo version file"
              VERSION=$(cat "$VERSION_FILE")
              echo "  Version: $VERSION"
            elif ls $CACHE_VERSION_FILE 2>/dev/null | head -1; then
              FOUND_FILE=$(ls $CACHE_VERSION_FILE 2>/dev/null | head -1)
              echo "✓ Found $repo version file (cache)"
              VERSION=$(cat "$FOUND_FILE")
              echo "  Version: $VERSION"
            elif [ -f "$WORK_VERSION_FILE" ]; then
              echo "✓ Found $repo version file (work dir)"
              VERSION=$(cat "$WORK_VERSION_FILE")
              echo "  Version: $VERSION"
            else
              echo "✗ Missing $repo version file"
              echo "  Tried: $VERSION_FILE"
              echo "  Tried: $CACHE_VERSION_FILE"
              echo "  Tried: $WORK_VERSION_FILE"
              VERSION_FILES_FOUND=false
            fi
          done
          
          if [ "$VERSION_FILES_FOUND" = "false" ]; then
            echo "✗ Release train verification failed - missing version files"
            exit 1
          fi
          
          echo "=== Release Train v{{ .Inputs.version }} COMPLETED SUCCESSFULLY ==="
          echo "All components released and verified"
          echo "Timestamp: $(date)"