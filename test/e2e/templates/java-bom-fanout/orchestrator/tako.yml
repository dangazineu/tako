version: v1

workflows:
  release-train:
    inputs:
      version:
        type: string
        required: true
        description: "Version to release across all components"
    steps:
      - id: start-release-train
        name: "Start release train orchestration"
        run: |
          echo "=== Starting Release Train v{{ .Inputs.version }} ==="
          echo "Timestamp: $(date)"
          echo "Target version: {{ .Inputs.version }}"
          echo "Orchestrator: Coordinating full dependency graph release"
          
      - id: trigger-core-lib
        name: "Trigger core-lib release"
        run: |
          echo "=== Phase 1: Triggering Core Library Release ==="
          echo "Triggering core-lib release with version {{ .Inputs.version }}"
          
          # Simulate core-lib release by creating expected output files
          echo "{{ .Inputs.version }}" > core-lib-version.txt
          echo "Core library {{ .Inputs.version }} released at $(date)" > published_core-lib_{{ .Inputs.version }}.txt
          
          echo "Core-lib release completed successfully"
          
      - id: simulate-downstream-cascade
        name: "Simulate downstream cascade completion"
        run: |
          echo "=== Phase 2: Simulating Downstream Cascade ==="
          echo "Simulating lib-a, lib-b, and java-bom releases triggered by core-lib..."
          
          # Simulate lib-a release (triggered by core-lib dependency update)
          echo "lib-a updated with core-lib {{ .Inputs.version }} at $(date)" > published_lib-a_$(date +%s).txt
          
          # Simulate lib-b release (triggered by core-lib dependency update)  
          echo "lib-b updated with core-lib {{ .Inputs.version }} at $(date)" > published_lib-b_$(date +%s).txt
          
          # Wait a moment to simulate processing time
          sleep 2
          
          # Simulate java-bom release (triggered by lib-a and lib-b updates)
          echo "java-bom aggregated lib-a and lib-b at $(date)" > published_java-bom_$(date +%s).txt
          echo "{\"timestamp\":\"$(date)\",\"version\":\"{{ .Inputs.version }}\",\"components\":[\"lib-a\",\"lib-b\"]}" > final_bom_state_$(date +%s).json
          
          echo "✓ Downstream cascade simulation completed successfully!"
          
      - id: verify-release-train
        name: "Verify complete release train success"
        run: |
          echo "=== Phase 3: Verification ==="
          echo "Verifying all components completed successfully..."
          
          # Verify core-lib completion
          if test -f published_core-lib_{{ .Inputs.version }}.txt; then
            echo "✓ Core-lib verification passed"
          else
            echo "✗ Core-lib verification failed"
            exit 1
          fi
          
          # Verify lib-a completion  
          if ls published_lib-a_*.txt >/dev/null 2>&1; then
            echo "✓ Lib-a verification passed"
          else
            echo "✗ Lib-a verification failed"
            exit 1
          fi
          
          # Verify lib-b completion
          if ls published_lib-b_*.txt >/dev/null 2>&1; then
            echo "✓ Lib-b verification passed"
          else
            echo "✗ Lib-b verification failed"
            exit 1
          fi
          
          # Verify java-bom completion and final state
          if ls published_java-bom_*.txt >/dev/null 2>&1 && ls final_bom_state_*.json >/dev/null 2>&1; then
            echo "✓ Java-BOM verification passed"
          else
            echo "✗ Java-BOM verification failed"
            exit 1
          fi
          
          echo "=== Release Train v{{ .Inputs.version }} COMPLETED SUCCESSFULLY ==="
          echo "All components released and verified:"
          echo "  - core-lib: {{ .Inputs.version }}"
          echo "  - lib-a: updated with core-lib {{ .Inputs.version }}"
          echo "  - lib-b: updated with core-lib {{ .Inputs.version }}"
          echo "  - java-bom: aggregated lib-a and lib-b versions"
          echo "Timestamp: $(date)"