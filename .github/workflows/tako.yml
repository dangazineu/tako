name: Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Display Go version
        run: go version

      - name: Run unit tests
        run: go test -v -race ./internal/... ./cmd/tako/...

  linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Display Go version
        run: go version

      - name: Run unit tests
        run: go test -v -race ./internal/... ./cmd/tako/...

      - run: go fmt ./...
      - name: Detect Changes
        run: git diff --exit-code

      - name: Upload coverage reports to Codecov
        if: github.event_name != 'pull_request'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  validation:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run integration tests (Docker not required)  
        run: |
          # Test root package - e2e tests are excluded because we're not using -tags=e2e
          timeout 3m go test -v -short -race -timeout=2m .

  coverage:
    runs-on: ubuntu-latest
    needs: [test-internal, test-cmd]
    if: github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Run tests with coverage
      run: go test -short -coverprofile=coverage.out ./...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.out